using System;
using System.Windows;
using OpenTelemetry;
using OpenTelemetry.Trace;
using OpenTelemetry.Resources;

namespace YourNamespace
{
    public partial class App : Application
    {
        private TracerProvider tracerProvider;

        protected override void OnStartup(StartupEventArgs e)
        {
            // Configure the OpenTelemetry resource with your service name.
            var resource = ResourceBuilder.CreateDefault()
                .AddService(serviceName: "YourWpfApp");  // Important: sets the service name

            // Setup the tracer provider with OTLP exporter.
            tracerProvider = Sdk.CreateTracerProviderBuilder()
                .SetResourceBuilder(resource)
                .AddSource("WpfStartup")  // Name of the activity source
                .AddOtlpExporter(options =>
                {
                    // Set your OTLP endpoint. Adjust the URL to match your endpoint.
                    options.Endpoint = new Uri("https://your-apm-endpoint.example.com");
                    // You can configure additional options (e.g., headers, timeout) here.
                })
                .Build();

            // Get a tracer from the configured provider.
            var tracer = tracerProvider.GetTracer("WpfStartup");

            // Start a span for the application startup event.
            using (var span = tracer.StartActiveSpan("ApplicationStartup", out var activeSpan))
            {
                // Add an attribute for the startup time.
                activeSpan.SetAttribute("StartupTime", DateTime.UtcNow.ToString("o"));

                // Execute your startup logic here.
                // For example: initialize services, load configurations, etc.
            }

            base.OnStartup(e);
        }

        protected override void OnExit(ExitEventArgs e)
        {
            // Dispose the tracer provider to ensure all spans are flushed.
            tracerProvider?.Dispose();
            base.OnExit(e);
        }
    }
}
